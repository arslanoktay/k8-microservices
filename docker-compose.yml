version: '3.8'

services:
  # Kafka Servisi
  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-123
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092" # Kafka internal
      - "9094:9094" # Kafka external (localhost erişimi için)
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - my-network

  # Analytics Service
  analytics-service:
    container_name: analytics-service
    build:
      context: ./analytics-service # analytics-service klasörünün yolu
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Gerekirse diğer environment değişkenleri buraya eklenebilir
    networks:
      - my-network
    depends_on:
      - kafka # Kafka başlamadan analytics-service başlamasın (opsiyonel ama iyi bir pratik)

  # API Gateway
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway # api-gateway klasörünün yolu
      dockerfile: Dockerfile
    ports:
      - "4004:4004"
    networks:
      - my-network
    # Genellikle gateway diğer servislerin bir kısmına bağımlı olabilir
    # depends_on:
    #   - patient-service
    #   - billing-service
    #   - analytics-service

  # Billing Service
  billing-service:
    container_name: billing-service
    build:
      context: ./billing-service # billing-service klasörünün yolu
      dockerfile: Dockerfile
    ports:
      - "4001:4001" # HTTP portu
      - "9001:9001" # gRPC portu
    networks:
      - my-network

  # Patient Service Database (PostgreSQL)
  patient-service-db:
    image: postgres:15
    container_name: patient-service-db
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5433:5432" # Dışarıdan veritabanına erişim için (opsiyonel, geliştirme için)
    volumes:
      - patient_db_data:/var/lib/postgresql/data # Verilerin kalıcı olması için
    networks:
      - my-network

  # Patient Service
  patient-service:
    container_name: patient-service
    build:
      context: ./patient-service # patient-service klasörünün yolu
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # Geliştirme için 'update', production için 'validate' veya 'none'
      SPRING_SQL_INIT_MODE: always # Geliştirme için, production'da dikkatli kullanılmalı
      BILLING_SERVICE_ADDRESS: billing-service # Billing servisine network üzerinden erişim
      BILLING_SERVICE_GRPC_PORT: 9001
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - patient-service-db # Veritabanı başlamadan bu servis başlamasın
      - kafka              # Kafka başlamadan bu servis başlamasın (opsiyonel ama iyi bir pratik)
      - billing-service    # Billing servisi başlamadan bu servis başlamasın (opsiyonel)
    networks:
      - my-network

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "4005:4005"
    environment:
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      JWT_SECRET: YVb2S04x4d/K2yB3Q9T8c7e6F5A4D3C2B1A0Z9X8W7V6U5T4S3R2Q1P0O9N8M7L6K5J4I3H2G1F0E9D8C7B6A5Z4Y3X2W1V0U9T8S7R6Q5P4O3N2M1L0K9J8I7H6G5F4E3D2C1B0A9Z8Y7X6W5V4U3T2S1R0Q9P8O7N6M5L4K3J2I1H0G==
    networks:
      - my-network

    # Auth service DB
  auth-service-db:
    image: postgres:15
    container_name: auth-service-db
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password
    ports:
      - "5001:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - my-network
    #restart: unless-stopped

volumes:
  kafka_data: # Kafka verileri için
  patient_db_data: # Patient Service veritabanı verileri için
  auth_db_data:

networks:
  my-network:
    driver: bridge # Docker'ın varsayılan bridge network'ünü kullanır ve kendisi oluşturur
    # Eğer my-network'ü önceden 'docker network create my-network' ile oluşturduysanız
    # ve harici olarak yönetmek istiyorsanız aşağıdaki satırları kullanın:
    # name: my-network
    # external: true